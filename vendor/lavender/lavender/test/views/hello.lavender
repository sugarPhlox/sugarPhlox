extends layout

-title = "dis be a title"

block content

  pre.
      asdf
      asdf
    asdf

  // some comment 
  //- some hidden comment

  -list = ['asdf', 'qwer', 'foo', 'bar']

  div
    = list|float('qwer')|join
  div
    = list|sink('qwer')|join
  div
    = list|float(['qwer', 'asdf'])|join
  div
    = list|sink(['qwer', 'asdf'])|join

  div
    = collection('asdf')|join
 
  collection asdf thing thing
  collection asdf thing thing
   
  - checked = false
  input.asdf-asdf(type="checkbox",checked=checked)

  div foo

  -arr = {}
  -arr.qwerboo = 'bar'

  div= arr.qwerboo

  div bar

  if ['qwer', 'asdf']|contains('asdf')
    div the thing is in the thing
  if ['qwer', 'asdf']|contains('foobar')
    div this is bad 

  if 5|is('number')
    div this is a number
  if ['qwer', 'asdf']|is('list')
    div the thing is a list 
  if {qwer: 'asdf'}|is('list')
    div this is bad
  if {qwer: 'asdf'}|is('object')
    div the thing is an object 
  if "Asdf"|is('string')
    div the thing is a string 
  if 8|is('string')
    div this is bad

  div
    = {asdf: 'zzxcv', qwer: 'zxcv'}|json

  p
    |asdf asdf asdf asdf asdf
    a(href="#")- qwer
    |. asdf asdf asdf asdf asdf
    |asdf asdf asdf asdf asdf

  div(
    class="foo bar baz",
    style="border: 1px solid red;" +
      "background: #ccc;" +
      "border-radius: 5px;"
  )
    = "asdfasdfasdfasdf " +
      "asdfasdfsadfasd " +
      "qwerqwerqwer "

  if (
    !true || true &&
    true &&
    true ||
    (
      true ||
      false
    )
  ) 
    div.
      asdf #{ "i r werking" } asdfasd asdfsadf
      asdfasdfa#sdfasdfasdf
      asdfasdfsadf
      zxcvzxcvzxcv

  if !(0 * (5 + 5 + 5))
    div
      |asdfasdfasd asdfsadf
      |asdfasdfasdfasdfasdf
      |asdfasdfsadf
      |zxcvzxcvzxcv

  - list = ['asdf', 'qwer', 'zxcv'] 
  - foo = {key: "bar"}
  - bar = "zxcv"
  - key = 'key'
  div
    |adfasd#{list[2]|upper}fasdf #{foo[key]|upper} asdfasdfasdf #{bar} asdf

  div
    = 1397411960|relative
  div
    = ['asdf','qwer']|length
  div
    | last
    = []|last
  div
    = ['asdf','qwer']|first
  div
    = ['asdf','qwer']|keys|first
  div
    = ['asdf','qwer']|join
  div
    = ''|default('foobar')
  div
    = '1396372567'|date()
  div
    = "foo bar"|capitalize
  div
    = "FOO BAR"|lower
  div
    = "new\nline"|nl2br
  div
    = 12345.123|round(2)
  each value in ['foo', 'bar']|merge(['baz']) 
    div(style="border: 1px solid red;")= value
  div
    = "foo bar"|replace(' ', '-')
  div
    = ['asdf', 'qwer']|reverse|join()
  each value in ['foo', 'bar']|merge(['baz'])|slice(1,1)
    div(style="border: 1px solid red;")= value
  div
    = 10000000000.12345|number_format(2, ',', '.')
  div
    = 10000000000.12345|ceil
  div
    = 10000000000.12345|floor

  // this is a comment
    so is this

  input(type="text",value="fooooobar")

  - myvariable = "im gonna filter some stuff. its gonna be cool."

  div
    = myvariable | upper

  div
    = myvariable | title

  div
    = myvariable | trim('.')

  each value in myvariable|split(' ')
    div(style="border: 1px solid red;")= value
 
  each value in "these are some words"|split(' ')|sort
    div= value

  if TRUE
    div this should show
  else
    div this should not

  if FALSE
    div this should not
  elseif FALSE
    div elseif here
  elseif TRUE
    div elseif here2
  else
    div this is an else

  if !FALSE
    div this should

  - empty_array = []
  
  each value in empty_array
    div= value
  else
    div empty array :(

  div
    | 1 + 1 = 
    = 1 + 1

  div
    | 2 - 3 = 
    = 2 - 3

  div
    | 2 * 3 = 
    = 2 * 3

  div
    | 10 / 5 = 
    = 10 / 5

  div.bam#asdf(style="border: 1px solid red;")
    span(awesome-attribute="foobar")
    | red

  - test_array = ['asdf', 'asdf2', 'asdf3']

  each value, key in test_array
    div(id=key,style="border: 1px solid black; margin-top: 5px;")= value 

  - test_array2 = {key1: 'foooooooooo', key2: 'qwer'} 
  = test_array2.key1

  if test_object.qwerty 
    | asdf

  #thisdiv(style="border: 1px solid green; margin-top: 5px;") green

  if foo
    div(style="border: 1px solid black; margin-top: 5px;")= foo
     
  if bar
    div(style="border: 1px solid black; margin-top: 5px;")
      = bar

  if 7 == seven
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | 7 == seven

  if 6.6 > 6.5 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | 6.6 > 6.5 

  if 4 % 2 == 0 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | 4 % 2 == 0

block content2
  if seven > eight
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | seven is bigger than eight
  if eight > seven 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is bigger than seven
  if eight >= seven 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is bigger or equal to than seven
  if eight >= eight 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is bigger or equal to than eight 

  if seven < eight
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | seven is less than eight
  if eight < seven 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is less than seven 
  if seven <= eight 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is less or equal to than seven
  if eight <= eight 
    div(style="border: 1px dashed blue; margin-top: 5px;")
      | eight is less or equal to than eight 

  if eight > seven && seven < eight 
    div(style="border: 1px dashed red; margin-top: 5px;")
      | eight > seven && seven < eight

  if eight > seven || eight < seven 
    div(style="border: 1px dashed red; margin-top: 5px;")
      | eight > seven || eight < seven

  if test_array.key
    div(style="border: 1px dashed orange; margin-top: 5px;")
      = test_array.key

  if test_object.key
    div(style="border: 1px dashed orange; margin-top: 5px;")
      = test_object.key

  div(style="border: 1px solid black; margin-top: 5px;")
    = test("aasdf", baz)

  #thisdiv2(style="border: 1px solid blue; margin-top: 5px;") blue

  include include with {
    foo: foo.key
  }

  div last
